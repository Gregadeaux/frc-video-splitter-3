/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.8.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DistrictApi", () => {
  let instance: api.DistrictApi
  beforeEach(function() {
    instance = new api.DistrictApi(config)
  });

  test("getDistrictEvents", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictEvents(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictEventsKeys", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictEventsKeys(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictEventsSimple", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictEventsSimple(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictRankings", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictRankings(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictTeams", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictTeams(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictTeamsKeys", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictTeamsKeys(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictTeamsSimple", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictTeamsSimple(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictsByYear", () => {
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictsByYear(year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventDistrictPoints", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventDistrictPoints(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamDistricts", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamDistricts(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
})

describe("EventApi", () => {
  let instance: api.EventApi
  beforeEach(function() {
    instance = new api.EventApi(config)
  });

  test("getDistrictEvents", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictEvents(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictEventsKeys", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictEventsKeys(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictEventsSimple", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictEventsSimple(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEvent", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEvent(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventAlliances", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventAlliances(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventAwards", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventAwards(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventDistrictPoints", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventDistrictPoints(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventInsights", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventInsights(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventMatchTimeseries", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventMatchTimeseries(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventMatches", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventMatches(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventMatchesKeys", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventMatchesKeys(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventMatchesSimple", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventMatchesSimple(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventOPRs", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventOPRs(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventPredictions", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventPredictions(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventRankings", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventRankings(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventSimple", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventSimple(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeams", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeams(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeamsKeys", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeamsKeys(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeamsSimple", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeamsSimple(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeamsStatuses", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeamsStatuses(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventsByYear", () => {
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventsByYear(year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventsByYearKeys", () => {
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventsByYearKeys(year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventsByYearSimple", () => {
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventsByYearSimple(year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventAwards", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventAwards(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventMatches", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventMatches(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventMatchesKeys", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventMatchesKeys(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventMatchesSimple", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventMatchesSimple(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventStatus", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventStatus(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEvents", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEvents(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsByYear", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsByYear(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsByYearKeys", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsByYearKeys(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsByYearSimple", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsByYearSimple(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsKeys", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsKeys(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsSimple", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsSimple(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsStatusesByYear", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsStatusesByYear(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
})

describe("ListApi", () => {
  let instance: api.ListApi
  beforeEach(function() {
    instance = new api.ListApi(config)
  });

  test("getDistrictEvents", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictEvents(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictEventsKeys", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictEventsKeys(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictEventsSimple", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictEventsSimple(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictRankings", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictRankings(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictTeams", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictTeams(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictTeamsKeys", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictTeamsKeys(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictTeamsSimple", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictTeamsSimple(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeams", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeams(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeamsKeys", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeamsKeys(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeamsSimple", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeamsSimple(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeamsStatuses", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeamsStatuses(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventsByYear", () => {
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventsByYear(year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventsByYearKeys", () => {
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventsByYearKeys(year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventsByYearSimple", () => {
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventsByYearSimple(year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsStatusesByYear", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsStatusesByYear(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeams", () => {
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeams(pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsByYear", () => {
    const year: number = 56
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsByYear(year, pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsByYearKeys", () => {
    const year: number = 56
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsByYearKeys(year, pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsByYearSimple", () => {
    const year: number = 56
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsByYearSimple(year, pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsKeys", () => {
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsKeys(pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsSimple", () => {
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsSimple(pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
})

describe("MatchApi", () => {
  let instance: api.MatchApi
  beforeEach(function() {
    instance = new api.MatchApi(config)
  });

  test("getEventMatchTimeseries", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventMatchTimeseries(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventMatches", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventMatches(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventMatchesKeys", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventMatchesKeys(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventMatchesSimple", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventMatchesSimple(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getMatch", () => {
    const matchKey: string = "matchKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getMatch(matchKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getMatchSimple", () => {
    const matchKey: string = "matchKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getMatchSimple(matchKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getMatchTimeseries", () => {
    const matchKey: string = "matchKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getMatchTimeseries(matchKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getMatchZebra", () => {
    const matchKey: string = "matchKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getMatchZebra(matchKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventMatches", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventMatches(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventMatchesKeys", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventMatchesKeys(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventMatchesSimple", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventMatchesSimple(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamMatchesByYear", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamMatchesByYear(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamMatchesByYearKeys", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamMatchesByYearKeys(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamMatchesByYearSimple", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamMatchesByYearSimple(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
})

describe("TBAApi", () => {
  let instance: api.TBAApi
  beforeEach(function() {
    instance = new api.TBAApi(config)
  });

  test("getStatus", () => {
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getStatus(ifModifiedSince, {})).resolves.toBe(null)
  })
})

describe("TeamApi", () => {
  let instance: api.TeamApi
  beforeEach(function() {
    instance = new api.TeamApi(config)
  });

  test("getDistrictRankings", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictRankings(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictTeams", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictTeams(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictTeamsKeys", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictTeamsKeys(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getDistrictTeamsSimple", () => {
    const districtKey: string = "districtKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getDistrictTeamsSimple(districtKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeams", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeams(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeamsKeys", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeamsKeys(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeamsSimple", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeamsSimple(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getEventTeamsStatuses", () => {
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getEventTeamsStatuses(eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeam", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeam(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamAwards", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamAwards(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamAwardsByYear", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamAwardsByYear(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamDistricts", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamDistricts(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventAwards", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventAwards(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventMatches", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventMatches(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventMatchesKeys", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventMatchesKeys(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventMatchesSimple", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventMatchesSimple(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventStatus", () => {
    const teamKey: string = "teamKey_example"
    const eventKey: string = "eventKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventStatus(teamKey, eventKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEvents", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEvents(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsByYear", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsByYear(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsByYearKeys", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsByYearKeys(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsByYearSimple", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsByYearSimple(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsKeys", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsKeys(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsSimple", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsSimple(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamEventsStatusesByYear", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamEventsStatusesByYear(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamMatchesByYear", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamMatchesByYear(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamMatchesByYearKeys", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamMatchesByYearKeys(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamMatchesByYearSimple", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamMatchesByYearSimple(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamMediaByTag", () => {
    const teamKey: string = "teamKey_example"
    const mediaTag: string = "mediaTag_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamMediaByTag(teamKey, mediaTag, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamMediaByTagYear", () => {
    const teamKey: string = "teamKey_example"
    const mediaTag: string = "mediaTag_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamMediaByTagYear(teamKey, mediaTag, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamMediaByYear", () => {
    const teamKey: string = "teamKey_example"
    const year: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamMediaByYear(teamKey, year, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamRobots", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamRobots(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamSimple", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamSimple(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamSocialMedia", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamSocialMedia(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamYearsParticipated", () => {
    const teamKey: string = "teamKey_example"
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamYearsParticipated(teamKey, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeams", () => {
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeams(pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsByYear", () => {
    const year: number = 56
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsByYear(year, pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsByYearKeys", () => {
    const year: number = 56
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsByYearKeys(year, pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsByYearSimple", () => {
    const year: number = 56
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsByYearSimple(year, pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsKeys", () => {
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsKeys(pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
  test("getTeamsSimple", () => {
    const pageNum: number = 56
    const ifModifiedSince: string = "ifModifiedSince_example"
    return expect(instance.getTeamsSimple(pageNum, ifModifiedSince, {})).resolves.toBe(null)
  })
})

